# えむすいーぱ
## ゲーム概要
フィールドの中にはいくつかの「えむ」が潜んでいる。その「えむ」を除去すべく「えむすいーぱ」は立ち上がった。
フィールドの「えむ」以外のところをすべて開けばゲームクリアだ。「えむ」は開いてはならない。しかし、そのまわりに「えむ」がいくつあるのかの情報は数字で表示される。そのヒントとともに「えむフラグ」をたてて世界を平和に導け！

## 操作方法
### カーソル移動
789 ↖↑↗
4.6 ←.→
123 ↙↓↘
右と左が対応していて斜め移動もできる。カーソルは[]で囲われていて、その中は選択中のセルである。
カーソル位置を掘る場合、5もしくは[Enter]で掘れる。
Fキーでそこを「えむ」と、断定する。そこの箇所に「えむ」が存在すると仮定して堀り進められる点に注意する。

## プログラム構造
### マップ構造
マップは以下の構造をしている。
```c
typedef struct{
  int width;
  int height;
  int numOfBombs;
  int **field;
} field_t;/*field*/
```
マップの情報にはマップサイズと「えむ」の量、フィールド情報で構成される。フィールド情報には以下の状態番号が振られる。
0-8まではそこの回りにいくつ「えむ」が存在するのかをしめす。そこのところに「えむ」は存在しない。「えむ」が存在する場所には9が与えられる。10-18までは実際に開いた項を示す。20-29まではフラグの箇所を示す。誤ったところにもえむフラグは存在できるものとする。

### マップ生成手順
マップ生成は初手落ちしないように救済が施されている。GNOMEのマインスイーパと同様に、初手の位置が確定した瞬間に、その位置のまわり９マスを除いたすべてのところを「えむ」の置ける候補とする。その候補を配列に格納し、ランダムにシャッフルしたのちにそのうちの先頭からn個を「えむ」としてセットすることで生成することができる。その際にまわりの状態を一つずつ進めることで処理を一部簡略化している。

### 掘り出す手順
ユーザーが掘る位置からまわり８マスのうち、フラグが立てられた場所の数を数え、その数とユーザーが指定したマスの数が一致したときに、可能なだけ周囲のマスを開いていく。その際、さらに再帰的にその掘る作業を繰り返すことで、フィールド全体で効率的に掘り進めていくことができる。

### 画面制御あたり
画面制御まわりはエスケープシーケンスをつかって無理やり制御している。
```c
SET_BACKGROUND_COL(col)			背景色をcolに変更
SET_FRONTGROUND_COL(col)		文字色をcolに変更
REVERCE_BACKGROUND_FRONTGROUND_COL()	文字色と背景色を交換
RESET_SETTING				設定をリセットする
CLR_SCREEN				スクリーンを綺麗にする
SET_CURSOR(x,y)				カーソルを(x,y)に移動する
```

### ベクトルたち
ベクトルの型を用意した。足し算などを使ってカーソル移動などを提供する。
vector_t add(vector_t a,vector_t b)				二つのベクトルを加算する
int distSq(vector_t a,vector_t b)				二点間の距離の二乗を求める
vector_t calcMotion(char ch)					移動量を求める
void calcCursor(field_t *field,char ch,vector_t *cursor)	次のカーソル位置を求める

### キータスクを行う関数
bool keyTask(field_t *field,vector_t *cursor,unsigned int time,char key,bool *isStarted)
キータスクを行い、終了時にはtrueを返す。この関数ではキー操作に対応する動作をする関数にジャンプすることが目的であるが、終了判定も行う。

### 